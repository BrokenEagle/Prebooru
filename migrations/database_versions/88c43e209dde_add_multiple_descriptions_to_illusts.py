"""Add multiple descriptions to illusts

Revision ID: 88c43e209dde
Revises: 
Create Date: 2021-04-30 11:56:10.212668

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '88c43e209dde'
down_revision = None
branch_labels = None
depends_on = None

# Table definitions
t_illust = sa.Table(
    'illust',
    sa.MetaData(),
    sa.Column('id', sa.Integer),
    sa.Column('description', sa.UnicodeText),
)

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    t_description = op.create_table(
        'description',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('body', sa.UnicodeText(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
    )
    t_illust_descriptions = op.create_table(
        'illust_descriptions',
        sa.Column('description_id', sa.Integer(), nullable=False),
        sa.Column('illust_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['description_id'], ['description.id'], ),
        sa.ForeignKeyConstraint(['illust_id'], ['illust.id'], ),
        sa.PrimaryKeyConstraint('description_id', 'illust_id'),
    )
    # ###

    connection = op.get_bind()
    # Select all existing names that need migrating.
    illust_results = connection.execute(sa.select([
        t_illust.c.id,
        t_illust.c.description,
        ])).fetchall()
    # Insert description records (unique only)
    seen_items = set()
    for id_, description in illust_results:
        if description in seen_items:
            continue
        connection.execute(t_description.insert().values(
            body=description,
            ))
        seen_items.add(description)
    description_results = connection.execute(sa.select([
        t_description.c.id,
        t_description.c.body,
        ])).fetchall()
    # Insert many-to-many records
    for illust_id, description in illust_results:
        for description_id, description_body in description_results:
            if description == description_body:
                connection.execute(t_illust_descriptions.insert().values(
                    illust_id=illust_id,
                    description_id=description_id,
                    ))

    # ###
    with op.batch_alter_table('illust', schema=None) as batch_op:
        batch_op.drop_column('description')
    # ### end Alembic commands ###


def downgrade():
    # Table definitions
    t_description = sa.Table(
        'description',
        sa.MetaData(),
        sa.Column('id', sa.Integer()),
        sa.Column('body', sa.UnicodeText()),
    )
    t_illust_descriptions = sa.Table(
        'illust_descriptions',
        sa.MetaData(),
        sa.Column('description_id', sa.Integer()),
        sa.Column('illust_id', sa.Integer()),
    )

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('illust', schema=None) as batch_op:
        batch_op.add_column(sa.Column('description', sa.TEXT(), nullable=True))
    # ###

    connection = op.get_bind()
    description_results = connection.execute(sa.select([
        t_description.c.id,
        t_description.c.body,
        ])).fetchall()
    illust_description_results = connection.execute(sa.select([
        t_illust_descriptions.c.illust_id,
        t_illust_descriptions.c.description_id,
        ])).fetchall()
    # Update description column
    for illust_id, description_id in illust_description_results:
        description = next(filter(lambda x: x[0] == description_id, description_results), None)
        if description is None:
            continue
        connection.execute(t_illust.update().where(t_illust.c.id == illust_id).values(
            description=description[1],
            ))

    # ###
    op.drop_table('illust_descriptions')
    op.drop_table('description')
    # ### end Alembic commands ###
