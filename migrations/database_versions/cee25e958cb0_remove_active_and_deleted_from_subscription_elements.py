"""Remove active and deleted from subscription elements

Revision ID: cee25e958cb0
Revises: a4059b46e578
Create Date: 2022-09-22 17:34:27.406087

"""
# ## EXTERNAL IMPORTS
from alembic import op
import sqlalchemy as sa


# ## GLOBAL VARIABLES

# revision identifiers, used by Alembic.
revision = 'cee25e958cb0'
down_revision = 'a4059b46e578'
branch_labels = None
depends_on = None


# ## FUNCTIONS

def init():
    global SubscriptionElementStatus, TYPE_RG
    from app.models.subscription_element import SubscriptionElementStatus


def upgrade(engine_name):
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name):
    globals()["downgrade_%s" % engine_name]()


def upgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('subscription_element', schema=None) as batch_op:
        batch_op.drop_column('deleted')
        batch_op.drop_column('active')

    # ### end Alembic commands ###


def downgrade_():
    print("Initializing")
    init()
    t_subscription_element = sa.Table(
        'subscription_element',
        sa.MetaData(),
        sa.Column('id', sa.Integer),
        sa.Column('status', sa.Integer),
        sa.Column('active', sa.Boolean),
        sa.Column('deleted', sa.Boolean),
    )

    with op.batch_alter_table('subscription_element', schema=None) as batch_op:
        batch_op.add_column(sa.Column('active', sa.BOOLEAN(), nullable=True))
        batch_op.add_column(sa.Column('deleted', sa.BOOLEAN(), nullable=True))

    print("Populating columns")
    connection = op.get_bind()
    index = 0
    while True:
        element_data = connection.execute(sa.select([t_subscription_element.c.id, t_subscription_element.c.status]).limit(1000).offset(index * 1000)).fetchall()
        for subscription_element in element_data:
            status = SubscriptionElementStatus(subscription_element[1]).name
            connection.execute(t_subscription_element.update().where(t_subscription_element.c.id == subscription_element[0]).values(
                active=status == 'active',
                deleted=status in ['deleted', 'archived'],
                ))
        if len(element_data):
            print(f"subscription element #{element_data[0][0]} - subscription element #{element_data[-1][0]}")
        if len(element_data) < 1000:
            break
        index += 1

    print("Setting columns to nonnullable")
    with op.batch_alter_table('subscription_element', schema=None) as batch_op:
        batch_op.alter_column('active',
                              existing_type=sa.BOOLEAN(),
                              nullable=False
                              )
        batch_op.alter_column('deleted',
                              existing_type=sa.BOOLEAN(),
                              nullable=False
                              )
