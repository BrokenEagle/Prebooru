"""Add multiple profiles to artists

Revision ID: 06a2090ad210
Revises: 88c43e209dde
Create Date: 2021-04-30 14:40:25.581954

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '06a2090ad210'
down_revision = '88c43e209dde'
branch_labels = None
depends_on = None

# Table definitions
t_artist = sa.Table(
    'artist',
    sa.MetaData(),
    sa.Column('id', sa.Integer),
    sa.Column('profile', sa.UnicodeText),
)

t_description = sa.Table(
    'description',
    sa.MetaData(),
    sa.Column('id', sa.Integer()),
    sa.Column('body', sa.UnicodeText()),
)

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    t_artist_profiles = op.create_table(
        'artist_profiles',
        sa.Column('description_id', sa.Integer(), nullable=False),
        sa.Column('artist_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['artist_id'], ['artist.id'], ),
        sa.ForeignKeyConstraint(['description_id'], ['description.id'], ),
        sa.PrimaryKeyConstraint('description_id', 'artist_id'),
    )
    # ###

    connection = op.get_bind()
    # Select all existing names that need migrating.
    artist_results = connection.execute(sa.select([
        t_artist.c.id,
        t_artist.c.profile,
        ])).fetchall()
    description_results = connection.execute(sa.select([
        t_description.c.id,
        t_description.c.body,
        ])).fetchall()
    seen_items = set(body for id_,body in description_results)
    # Insert description records (unique only)
    for id_, profile in artist_results:
        if profile in seen_items:
            continue
        connection.execute(t_description.insert().values(
            body=profile,
            ))
        seen_items.add(profile)
    description_results = connection.execute(sa.select([
        t_description.c.id,
        t_description.c.body,
        ])).fetchall()
    # Insert many-to-many records
    for artist_id, profile in artist_results:
        for description_id, description_body in description_results:
            if profile == description_body:
                connection.execute(t_artist_profiles.insert().values(
                    artist_id=artist_id,
                    description_id=description_id,
                    ))

    # ###
    with op.batch_alter_table('artist', schema=None) as batch_op:
        batch_op.drop_column('profile')
    # ### end Alembic commands ###


def downgrade():
    # Table definitions
    t_artist_profiles = sa.Table(
        'artist_profiles',
        sa.MetaData(),
        sa.Column('description_id', sa.Integer()),
        sa.Column('artist_id', sa.Integer()),
    )

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('artist', schema=None) as batch_op:
        batch_op.add_column(sa.Column('profile', sa.TEXT(), nullable=True))

    connection = op.get_bind()
    description_results = connection.execute(sa.select([
        t_description.c.id,
        t_description.c.body,
        ])).fetchall()
    artist_profile_results = connection.execute(sa.select([
        t_artist_profiles.c.artist_id,
        t_artist_profiles.c.description_id,
        ])).fetchall()
    # Update description column
    for artist_id, description_id in artist_profile_results:
        description = next(filter(lambda x: x[0] == description_id, description_results), None)
        if description is None:
            continue
        connection.execute(t_artist.update().where(t_artist.c.id == artist_id).values(
            profile=description[1],
            ))

    # ###
    op.drop_table('artist_profiles')
    # ### end Alembic commands ###
